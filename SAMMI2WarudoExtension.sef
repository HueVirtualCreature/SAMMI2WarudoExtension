[extension_name]
SAMMI2WarudoExtension

[extension_info]
Written by Hue, the Centipede Youkai

[insert_external]
<style type="">
  * {
      box-sizing: border-box;
    }
</style>

<div class="row">
  <p>SAMMI2WarudoExtension: Interfaces SAMMI with Warudo by invoking endpoints on the Warudo API via Commands</p>
</div>
<div class="row">
  <div class="column">
    <img class="hue-img" src="https://i.imgur.com/PXr3Lez.png"></img>
  </div>
  <div class="column">
    <p>Created by Hue, the Centipede Youkai</p> 
    <a href="https://twitter.com/Hue_SwordDevil">Twitter</a>
    <a href="https://github.com/HueVirtualCreature/SAMMI2WarudoExtension">GitHub</a>
    <p>You may access the commands under Extension Commands > SAMMI Bridge > Warudo - *</p>
    <p>Please keep in mind that the Bridge MUST BE OPEN in order for any of its commands to work.</p>
    <p>Version: v0.1.0.0a</p>
  </div>
</div>

[insert_command]
SAMMI2Warudo_initialize();

[insert_hook]
case "WARUDO - Open":{
	createWarudoWebSocketClient();
} break

case "WARUDO - Get Toggles":{
	WARUDO_requestToggles();
} break

case "WARUDO - Get Recievers":{
	WARUDO_requestRecievers();
} break

case "WARUDO - Trigger":{
	WARUDO_requestSendTrigger(LioranBoardJSON.RECIEVER);
} break

case "WARUDO - Toggle":{
	WARUDO_requestSendToggle(LioranBoardJSON.RECIEVER);
} break

case "WARUDO - Message":{
	WARUDO_requestSendMessage(LioranBoardJSON.RECIEVER, LioranBoardJSON.MESSAGE);
} break

[insert_script]
const WARUDO_SERVER = 'ws://localhost:19069';
const WARUDO_PLUGINNAME = "SAMMI2WarudoExtension";
const WARUDO_AUTHORNAME = "Hue_vCreature";

window[`${WARUDO_PLUGINNAME}`] = {};

///
window[`${WARUDO_PLUGINNAME}`].ACTIONS = {
	OPEN: 'WARUDO - Open',
	GETTOGGLES: 'WARUDO - Get Toggles',
	GETRECIEVERS: 'WARUDO - Get Recievers',
	TRIGGER:'WARUDO - Trigger',
	TOGGLE:'WARUDO - Toggle',
	MESSAGE:'WARUDO - Message'
}

///
window[`${WARUDO_PLUGINNAME}`].WEBSOCKET_STATES = { CONNECTING: 0, OPEN: 1, CLOSING: 2, CLOSED: 3 };

///
window[`${WARUDO_PLUGINNAME}`].DATA = {RECIEVERS: [""]};

///
window[`${WARUDO_PLUGINNAME}`].HELPERS = {
	GETRANDOMID: () => {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	},
	POSTTOSAMMICONSOLE: (message, level = 1) => {
		switch(level) {
			case 0:
				SAMMI.notification("WARUDO: " + message);
				break;
			case 1:
				SAMMI.alert("WARUDO: " + message);
				break;
		}
	},
	INTERPRET_RESPONSE: (responseData) => {
		if (!responseData) { throw 'interpretResponse: responseData cannot be null!'; }
		switch(responseData.action) {
			case "getToggles":
				//Contains a key dict with state of toggles	
				//responseData.data
				break;
			case "getReceivers":
				window[`${WARUDO_PLUGINNAME}`].DATA.RECIEVERS = responseData.data
				break;
			case "trigger":
				debugger;
				break;
			case "toggle":
				//Contains state
				break;
			case "message":
				break;
			default:
				window[`${WARUDO_PLUGINNAME}`].HELPERS.POSTTOSAMMICONSOLE("Received an unknown message type: " + responseData.messageType + ". The handler for this event has not been implemented.");
				break;
		}
	},
	SAMMI2Warudo_generateBaseRequest: async (messageType) => {
		return {
			action: messageType,
			data: {}
		};
	},
	SAMMI2Warudo_insertBaseCommands: () => {
		SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.OPEN, 3355443, 52, {});
	
		// SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.GETTOGGLES, 3355443, 52, {
		// 	//Token: ["Save Token to Variable", 14, ""] //When the server responds with the auth token, save to global OR user-defined variable
		// });
	
		// SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.GETRECIEVERS, 3355443, 52, {
		// 	//Token: ["Save Token to Variable", 14, ""] //When the server responds with the auth token, save to global OR user-defined variable
		// });
	
		SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.TRIGGER, 3355443, 52, {
			RECIEVER: ["Reciever", 20, "", null, window[`${WARUDO_PLUGINNAME}`].DATA.RECIEVERS]
		});
	
		SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.TOGGLE, 3355443, 52, {
			RECIEVER: ["Reciever", 20, "",  null, window[`${WARUDO_PLUGINNAME}`].DATA.RECIEVERS]
		});
	
		SAMMI.extCommand(window[`${WARUDO_PLUGINNAME}`].ACTIONS.MESSAGE, 3355443, 52, {
			RECIEVER: ["Reciever", 20, "",  null, window[`${WARUDO_PLUGINNAME}`].DATA.RECIEVERS],
			MESSAGE: ["Message", 14, ""]
		});
	}
}

//Create the socket by which to faciliate comms with Warudo with
function createWarudoWebSocketClient(callback = null) {
	window.WARUDO_WebSocket = new WebSocket(WARUDO_SERVER);

		//Add Event Handlers
		window.WARUDO_WebSocket.onmessage = function(event) {
			if (event.data) {
				const responseData = JSON.parse(event.data);
				window[`${WARUDO_PLUGINNAME}`].HELPERS.INTERPRET_RESPONSE(responseData);
			} else {
				window[`${WARUDO_PLUGINNAME}`].HELPERS.POSTTOSAMMICONSOLE("Response data was empty", 1);
			}
		}
		
		window.WARUDO_WebSocket.onclose = function(event) {}

		window.WARUDO_WebSocket.onopen = function(event) {
			//TODO HUE Best place for this?
			// if (callback) callback();
		}

	if (callback) callback();
}

function WARUDO_sendRequestToWARUDO (request) {
	if (window.WARUDO_WebSocket) {
		window.WARUDO_WebSocket.send(JSON.stringify(request));
	}
	else {
		createWarudoWebSocketClient(() => {WARUDO_sendRequestToWARUDO(request)});
	}
}
//#region Request Functions for VTS

async function WARUDO_requestToggles() {
	let request = await window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_generateBaseRequest("getToggles");
	WARUDO_sendRequestToWARUDO(request);
}

async function WARUDO_requestRecievers() {
	let request = await window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_generateBaseRequest("getReceivers");
	request.data.type = '';
	WARUDO_sendRequestToWARUDO(request);
}

async function WARUDO_requestSendTrigger(reciever) {
	let request = await window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_generateBaseRequest("trigger");
	request.data.receiverName = reciever;
	WARUDO_sendRequestToWARUDO(request);
}

async function WARUDO_requestSendToggle(reciever) {
	let request = await window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_generateBaseRequest("toggle");
	request.data.receiverName = reciever;
	WARUDO_sendRequestToWARUDO(request);
}

async function WARUDO_requestSendMessage (reciever, message) {
	let request = await window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_generateBaseRequest("message");
	request.data.receiverName = reciever;
	request.data.message = message;
	WARUDO_sendRequestToWARUDO(request);
}
//#endregion End Request Functions for Warudo

function SAMMI2Warudo_initialize() {
	if (sammiclient) {
		console.debug("SAMMI2Warudo Started...");
		// createWarudoWebSocketClient();
		window[`${WARUDO_PLUGINNAME}`].HELPERS.SAMMI2Warudo_insertBaseCommands();
		return;
	}

	if (!sammiclient) {
		setTimeout(SAMMI2Warudo_initialize, 1000);
		return;
	}
}
[insert_over]
{ "deck_data": "{ \"background_color\": 4210752.0, \"on\": true, \"grid_y\": 6.0, \"snap_grid\": 1.0, \"lb_version\": \"2023.2.2\", \"background_image\": \"\", \"sammi_version\": \"2023.2.2\", \"encrypted\": false, \"adaptive_resizing\": 1.0, \"unique_id\": \"20230719172746264277429\", \"button_list\": [ { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Warudo - Open\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"extcmd\": \"WARUDO - Open\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"1DFSD23FDS14F65DS4F\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Get Toggles\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"F45D4FDS4GRF86HG4HT\", \"button_duration\": 0.0, \"y\": 0.16666666666666668517038374375261, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Trigger\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"RECIEVER\": \"TriggerA\", \"extcmd\": \"WARUDO - Trigger\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"456ADFS54GH65T4HT4GH9YRJ\", \"button_duration\": 0.0, \"y\": 0.5, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": true, \"text\": \"Get Recievers\", \"release_duration\": 0.0, \"queueable\": false, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"4FA6SD54F9DA8SG4D5S4G56A4G\", \"button_duration\": 0.0, \"y\": 0.33333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": false }, { \"color\": 12632256.0, \"persistent\": true, \"text\": \"Toggle\", \"release_duration\": 0.0, \"queueable\": false, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"RECIEVER\": \"ToggleB\", \"extcmd\": \"WARUDO - Toggle\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"G65TR4HS65T74W94857Y899\", \"button_duration\": 0.0, \"y\": 0.66666666666666674068153497501044, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": false }, { \"color\": 12632256.0, \"persistent\": true, \"text\": \"Message\", \"release_duration\": 0.0, \"queueable\": false, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"MESSAGE\": \"Test Message B\", \"RECIEVER\": \"MessageZ\", \"extcmd\": \"WARUDO - Message\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 19.0, \"width\": 1.0, \"button_id\": \"2GFD1H5T1G56RDE4JY566456E4J\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.16666666666666668517038374375261, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": false } ], \"deck_name\": \"SAMMI2WARUDO - Example\", \"grid_x\": 1.0, \"stretch\": 0.0 }", "unique_id": "20230719172746264277429", "deck_verification_code": "32294488255d64628a8e71b5a8d3abb741743aa9", "include_image": { } }